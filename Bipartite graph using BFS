
class Solution {
    
private:
    bool bfs(int start, vector<int> adj[], int color[]) {
        queue<int> q;
        q.push(start);
        color[start] = 0;
        
        while( !q.empty()) {
             int node = q.front();
             q.pop();
             
             for( auto it: adj[node]) {
                 if( color[it] == -1) {
                     color[it] = !color[node];
                     q.push(it);
                 }
                 else if( color[it] == color[node]) {
                     return false;
                 }
             }
        }
        
        return true;
    }
public:
	bool isBipartite(int V, vector<int>adj[]){
	    int color[V];
	    memset(color, -1, sizeof(color));// Or you can use memset: memset(color, -1, sizeof(color));

	    
	    for( int i=0; i<V; i++) {
	        if( color[i] == -1) {
	            if( bfs(i, adj, color) == false) return false; 
	        }
	    }
	    
	    return true;
	}

};

