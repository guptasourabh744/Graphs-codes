class Solution {
public:
    void toposort(int node, vector<pair<int, int>> adj[], stack<int> &st, vector<int> &vis) {
        vis[node] = 1;
        for (auto it : adj[node]) {
            if (!vis[it.first]) {
                toposort(it.first, adj, st, vis);
            }
        }
        st.push(node);
    }

    vector<int> shortestPath(int N, int M, vector<vector<int>> &edges) {
        vector<pair<int, int>> adj[N];
        for (int i = 0; i < M; i++) {
            int u = edges[i][0];
            int v = edges[i][1];
            int wt = edges[i][2];
            adj[u].push_back({v, wt});
        }

        stack<int> st;
        vector<int> vis(N, 0);

        for (int i = 0; i < N; i++) {
            if (!vis[i]) {
                toposort(i, adj, st, vis);
            }
        }

        vector<int> dist(N, 1e9);
        dist[0] = 0; // Distance from source to itself is 0

        while (!st.empty()) {
            int node = st.top();
            st.pop();

            if (dist[node] != 1e9) {
                for (auto it : adj[node]) {
                    int v = it.first;
                    int wt = it.second;
                    if (dist[node] + wt < dist[v]) {
                        dist[v] = dist[node] + wt;
                    }
                }
            }
        }

        for (int i = 0; i < N; i++) {
            if (dist[i] == 1e9) {
                dist[i] = -1; // Update unreachable nodes to -1
            }
        }

        return dist;
    }
};
